Per-Vertex Data Buffer
    - Let:
        - VP : vertex position data (3-float)
        - VN : vertex normal data (3-float)
        - VC : vertex color data (3-float)
        - VT : vertex texture data (2-float)
    - Then:
        - If a point cloud:
            - If [VP, VC]
        - Else:
            - If textured: [VP, VN, VT]
            - Elif vert colors or face colors: [VP, VN, VC]
            - Else: [VP, VN]

Element buffer:
    - If smoothed:
        - Face Coords

Instance buffer:
    - If instanced:
        - M matrices


Problem:
    - GL Context Manager has to keep track of state of objects and update them,
      same as with the scene. Have stuff stored in two places. Want to not have
      to worry about that, but also don't want to have to

    - For now, don't use deferred rendering and eat the performance hit. At some
      point later, handle deferred rendering properly.
        - Just brute-force shadow maps at some point.

    - Need to figure out how to incoporate lights into shaders for each object
      (have to bind each light).

    - Renderer takes in a scene, renders it


    - Need way to cache textures for:
        - Object material properties
        - Light shadow maps
